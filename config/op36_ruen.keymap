#define ZMK_POINTING_DEFAULT_MOVE_VAL 1800  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 60    // default: 10

#include <dt-bindings/zmk/pointing.h>
#include "keys_ru.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        lang_ru: lang_ru {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&mo>, <&layer_ru>;

            hold-trigger-on-release;
            label = "LANG_RU";
        };

        lang_en: lang_en {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&mo>, <&layer_en>;

            hold-trigger-on-release;
            label = "LANG_EN";
        };
    };

    combos {
        compatible = "zmk,combos";

        kha {
            bindings = <&kp RU_CYRILLIC_HA>;
            key-positions = <22 23>;
            layers = <1>;
        };

        hrdsgn {
            bindings = <&kp RU_CYRILLIC_HARD_SIGN>;
            key-positions = <26 27>;
            layers = <1>;
        };

        sym_slash_ru {
            bindings = <&kp RU_SLASH>;
            key-positions = <13 14>;
            layers = <1>;
        };

        sym_slash_en {
            bindings = <&kp RU_SLASH>;
            key-positions = <13 14>;
            layers = <0>;
        };

        sym_sign_en {
            bindings = <&kp AT_SIGN>;
            key-positions = <10 11>;
            layers = <0>;
        };

        sym_tire {
            bindings = <&kp MINUS>;
            key-positions = <11 12>;
        };

        sym_question_ru {
            bindings = <&kp RU_QUESTION>;
            key-positions = <12 13>;
            layers = <1>;
        };

        sym_question_en {
            bindings = <&kp QUESTION>;
            key-positions = <12 13>;
            layers = <0>;
        };

        lang_en {
            bindings = <&layer_en>;
            key-positions = <2 1>;
            layers = <1>;
        };

        sym_sneg {
            bindings = <&kp ASTRK>;
            key-positions = <22 23>;
        };

        sym_plus_en {
            bindings = <&kp PLUS>;
            key-positions = <2 3>;
            layers = <0>;
        };

        sym_hash {
            bindings = <&kp HASH>;
            key-positions = <3 4>;
        };

        sym_vosk {
            bindings = <&kp EXCL>;
            key-positions = <24 23>;
        };

        sym_dot_ru {
            bindings = <&kp RU_DOT>;
            key-positions = <15 16>;
            layers = <1>;
        };

        sym_dot_en {
            bindings = <&kp DOT>;
            key-positions = <15 16>;
            layers = <0>;
        };

        sym_com_ru {
            bindings = <&com_and_space_ru>;
            key-positions = <16 17>;
            layers = <1>;
        };

        sym_com_en {
            bindings = <&com_and_space_en>;
            key-positions = <16 17>;
            layers = <0>;
        };

        sym_sign_ru {
            bindings = <&en AT_SIGN>;
            key-positions = <10 11>;
            layers = <1>;
        };

        sym_plus_ru {
            bindings = <&kp RU_PLUS>;
            key-positions = <2 3>;
            layers = <1>;
        };

        sym_und {
            bindings = <&kp UNDER>;
            key-positions = <21 22>;
        };

        sym_colon_en {
            bindings = <&kp COLON>;
            key-positions = <6 7>;
            layers = <0>;
        };

        sym_colon_ru {
            bindings = <&kp RU_COLON>;
            key-positions = <6 7>;
            layers = <1>;
        };

        sym_semi_en {
            bindings = <&kp SEMI>;
            key-positions = <7 8>;
            layers = <0>;
        };

        sym_semi_ru {
            bindings = <&kp RU_SEMI>;
            key-positions = <7 8>;
            layers = <1>;
        };

        sym_tilde_en {
            bindings = <&kp TILDE>;
            key-positions = <20 21>;
            layers = <0>;
        };

        mouse_pointer {
            bindings = <&mouse_pointer>;
            key-positions = <10 11 12 13>;
        };

        sym_tilde_ru {
            bindings = <&en TILDE>;
            key-positions = <20 21>;
            layers = <0>;
        };

        lang_ru {
            bindings = <&layer_ru>;
            key-positions = <2 1>;
            layers = <0>;
        };
    };

    macros {
        to_ru: to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(F2))>;
            label = "TO_RU";
        };

        to_en: to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LG(F1))>;
            label = "TO_EN";
        };

        layer_en: layer_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &to_en>;
            label = "LAYER_EN";
        };

        layer_ru: layer_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &to_ru>;
            label = "LAYER_RU";
        };

        en: en {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&to_en &macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_wait_time 10>,
                <&to_ru>,
                <&macro_wait_time 10>;

            label = "EN";
        };

        com_and_space_en: com_and_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "COM_AND_SPACE";
        };

        com_and_space_ru: com_and_space_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RU_COMMA &kp SPACE>;
            label = "COM_AND_SPACE_RU";
        };

        mouse_pointer: mouse_pointer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&layer_en &kp LS(LG(SPACE))>;
            label = "MOUSE_POINTER";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        en {
            bindings = <
  &kp Q        &kp W        &kp E         &kp R         &kp T                                     &kp Y            &kp U         &kp I         &kp O        &kp P
  &hml LGUI A  &hml LALT S  &hml LSHFT D  &hml LCTRL F  &kp G                                     &kp H            &hmr RCTRL J  &hmr RSHFT K  &hmr LALT L  &hmr RGUI SEMICOLON
  &kp Z        &kp X        &kp C         &kp V         &kp B                                     &kp N            &kp M         &kp COMMA     &kp DOT      &kp SQT
                                          &lt 8 ESC     &lt 7 SPACE  &lang_ru 2 0    &lt 9 ENTER  &lt 4 BACKSPACE  &lt 2 TAB
            >;
        };

        ru {
            bindings = <
  &kp RU_CYRILLIC_SHORT_I   &kp RU_CYRILLIC_TSE         &kp RU_CYRILLIC_U          &kp RU_CYRILLIC_KA        &kp RU_CYRILLIC_IE                               &kp RU_CYRILLIC_EN  &kp RU_CYRILLIC_GHE        &kp RU_CYRILLIC_SHA        &kp RU_CYRILLIC_SHCHA     &kp RU_CYRILLIC_ZE
  &hml LGUI RU_CYRILLIC_EF  &hml LALT RU_CYRILLIC_YERU  &hml LSHFT RU_CYRILLIC_VE  &hml LCTRL RU_CYRILLIC_A  &kp RU_CYRILLIC_PE                               &kp RU_CYRILLIC_ER  &hmr RCTRL RU_CYRILLIC_O   &hmr RSHFT RU_CYRILLIC_EL  &hmr LALT RU_CYRILLIC_DE  &hmr RGUI RU_CYRILLIC_ZHE
  &kp RU_CYRILLIC_YA        &kp RU_CYRILLIC_CHE         &kp RU_CYRILLIC_ES         &kp RU_CYRILLIC_EM        &kp RU_CYRILLIC_I                                &kp RU_CYRILLIC_TE  &kp RU_CYRILLIC_SOFT_SIGN  &kp RU_CYRILLIC_BE         &kp RU_CYRILLIC_YU        &kp RU_CYRILLIC_E
                                                                                   &lt 8 ESC                 &lt 7 SPACE         &lang_en 3 0    &lt 9 ENTER  &lt 4 BACKSPACE     &lt 3 TAB
            >;
        };

        sym_en {
            bindings = <
  &kp TILDE       &kp LT          &kp EQUAL         &kp GT           &kp GRAVE                    &kp CARET  &kp LBKT         &kp UNDER        &kp RBKT        &kp DLLR
  &hml LGUI BSLH  &hml LALT LPAR  &hml LSHFT MINUS  &hml LCTRL RPAR  &kp PLUS                     &kp PRCNT  &hmr RCTRL LBRC  &hmr RSHFT SEMI  &hmr LALT RBRC  &hmr RGUI EXCL
  &kp HASH        &kp STAR        &kp COLON         &kp FSLH         &kp AMPS                     &kp AT     &kp PIPE         &kp COMMA        &kp DOT         &kp QMARK
                                                    &trans           &none      &trans    &trans  &none      &trans
            >;
        };

        sym_ru {
            bindings = <
  &en GRAVE  &en LT          &none             &en GT           &kp PIPE                            &en CARET  &en LEFT_BRACE    &kp UNDER  &en RIGHT_BRACE    &en DLLR
  &kp LGUI   &hml LALT LPAR  &hml LSHFT MINUS  &hml LCTRL RPAR  &kp RU_BACKSLASH                    &kp PRCNT  &en LEFT_BRACKET  &none      &en RIGHT_BRACKET  &none
  &none      &none           &none             &none            &en AMPS                            &none      &en PIPE          &none      &none              &en TILDE
                                               &trans           &none             &trans    &trans  &none      &trans
            >;
        };

        nav {
            bindings = <
  &trans              &trans              &trans            &trans               &trans                    &kp PLUS    &kp NUMBER_7         &kp NUMBER_8         &kp NUMBER_9        &kp EQUAL
  &kp LEFT_ARROW      &kp DOWN_ARROW      &kp UP_ARROW      &kp RIGHT_ARROW      &trans                    &kp RU_DOT  &hmr RCTRL NUMBER_4  &hmr RSHFT NUMBER_5  &hmr LALT NUMBER_6  &hmr RGUI NUMBER_0
  &kp LA(LEFT_ARROW)  &kp LA(DOWN_ARROW)  &kp LA(UP_ARROW)  &kp LA(RIGHT_ARROW)  &trans                    &kp MINUS   &kp NUMBER_1         &kp NUMBER_2         &kp NUMBER_3        &trans
                                                            &trans               &mo 6   &trans    &trans  &mo 5       &trans
            >;
        };

        adj {
            bindings = <
  &bootloader  &kp F1        &kp F2         &kp F3         &kp F4                     &bt BT_SEL 0  &bt BT_SEL 1         &bt BT_SEL 2       &bt BT_SEL 3        &bt BT_CLR
  &kp LGUI     &hml LALT F5  &hml LSHFT F6  &hml LCTRL F7  &kp F8                     &out OUT_BLE  &hmr RCTRL C_VOL_DN  &hmr RSHFT C_MUTE  &hmr LALT C_VOL_UP  &kp RGUI
  &none        &kp F9        &kp F10        &kp F11        &kp F12                    &out OUT_USB  &kp C_PREV           &kp C_PP           &kp C_NEXT          &studio_unlock
                                            &trans         &trans   &trans    &trans  &trans        &trans
            >;
        };

        mouse {
            bindings = <
  &kp LC(LS(TAB))         &msc SCRL_UP     &msc SCRL_DOWN  &kp LC(TAB)              &kp LC(LEFT_ARROW)                     &trans  &mkp LCLK          &mkp RCLK        &trans         &trans
  &mmv MOVE_LEFT          &mmv MOVE_DOWN   &mmv MOVE_UP    &mmv MOVE_RIGHT          &kp LC(RIGHT_ARROW)                    &trans  &kp RIGHT_CONTROL  &kp RIGHT_SHIFT  &kp RIGHT_ALT  &kp RIGHT_GUI
  &kp LG(LA(LEFT_ARROW))  &msc SCRL_RIGHT  &msc SCRL_LEFT  &kp LG(LA(RIGHT_ARROW))  &trans                                 &trans  &trans             &trans           &trans         &trans
                                                           &trans                   &trans               &trans    &trans  &trans  &trans
            >;
        };

        hot {
            bindings = <
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
                          &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        insert {
            bindings = <
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
                          &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        layer_9 {
            bindings = <
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
                          &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        sym_ru_back {
            bindings = <
  &en TILDE               &en LT          &kp EQUAL         &en GT           &en GRAVE                    &en CARET  &en LBKT  &kp UNDER           &en RBKT    &en DLLR
  &hml LGUI RU_BACKSLASH  &hml LALT LPAR  &hml LSHFT MINUS  &hml LCTRL RPAR  &kp PLUS                     &kp PRCNT  &en LBRC  &hmr RSHFT RU_SEMI  &en RBRC    &hmr RGUI EXCL
  &en HASH                &kp STAR        &kp RU_COLON      &kp RU_FSLH      &en AMPS                     &en AT     &en PIPE  &kp RU_COMMA        &kp RU_DOT  &kp RU_QMARK
                                                            &trans           &none      &trans    &trans  &none      &trans
            >;
        };

        sym_en_back {
            bindings = <
  &kp TILDE       &kp LT          &kp EQUAL         &kp GT           &kp GRAVE                    &kp CARET  &kp LBKT         &kp UNDER        &kp RBKT        &kp DLLR
  &hml LGUI BSLH  &hml LALT LPAR  &hml LSHFT MINUS  &hml LCTRL RPAR  &kp PLUS                     &kp PRCNT  &hmr RCTRL LBRC  &hmr RSHFT SEMI  &hmr LALT RBRC  &hmr RGUI EXCL
  &kp HASH        &kp STAR        &kp COLON         &kp FSLH         &kp AMPS                     &kp AT     &kp PIPE         &kp COMMA        &kp DOT         &kp QMARK
                                                    &trans           &none      &trans    &trans  &none      &trans
            >;
        };
    };
};
